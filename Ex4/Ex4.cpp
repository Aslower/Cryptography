#include <iostream>
#include <stdio.h>
#include "dec.h"

using namespace std;

const char* N_str = "10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531469002933770824382865926730400902798743137187335810705309884635534159797732259520594337385186897629868362414475309001507719259272508669419676508606630823351242964205044695669333236417591";

const char* e_str = "10335071977839588495324343307012721241868030345867699233451500809021555989403028103743221782417440900848403102247012012875905268518785845678756696925714007988778268752026049276281025329038071087021446834856566687537729918372863729292015978809506607411711073716898691660211835403800810547133032654209857";

const char *c_star_s = "775789568255447714013247918834475198679653917741675336925599335265205597974556878796619688391490153400553690715156825186410083467239441867930362368759072824742512821423959166270736914130604102452801162684877374802075310241079026986641176079329871431448404341153307957496668749957011118721172866996397";

//const char *m_text_s = "2";


int main()
{
/* Procedure
	1.Select a integer r which is smaller than N
	2.加密得到 Z = r^e_str mod N
	3.Key: X = ZC mod N
	4.r的逆元 t = r^-1 mod N
	5.m=X^d mod N
	6.c*=tm mod N
*/
    mpz_t r;
    mpz_t Z;
    mpz_t e;
    mpz_t N;
    mpz_t C;
    mpz_t X;
    mpz_t M;
    mpz_t t;
    mpz_init(t);
    mpz_init(X);
    mpz_init(Z);
    mpz_init_set_str(e,"10335071977839588495324343307012721241868030345867699233451500809021555989403028103743221782417440900848403102247012012875905268518785845678756696925714007988778268752026049276281025329038071087021446834856566687537729918372863729292015978809506607411711073716898691660211835403800810547133032654209857",10);
    mpz_init_set_str(N,"10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531469002933770824382865926730400902798743137187335810705309884635534159797732259520594337385186897629868362414475309001507719259272508669419676508606630823351242964205044695669333236417591",10);
    mpz_init_set_str(C,"775789568255447714013247918834475198679653917741675336925599335265205597974556878796619688391490153400553690715156825186410083467239441867930362368759072824742512821423959166270736914130604102452801162684877374802075310241079026986641176079329871431448404341153307957496668749957011118721172866996397",10);
   
    mpz_init_set_str(r,"45454454146",10);

    mpz_powm(Z,r,e,N);
    mpz_mul(X,Z,C);
    mpz_mod(X,X,N);

    char *m = dec(X);      //access the dec oracle
    printf("%s\n", m);
    mpz_init_set_str(M, m, 10);
    mpz_invert(t,r,N);
    mpz_mul(M,t,M);
    mpz_mod(M,M,N);

    gmp_printf("%Zd\n", M); 
 	return 0;
}
